directory_name = 'TEXT/';

% STEP 1: Load corpus data
% List of all text files in the directory
file_list = dir(fullfile(directory_name, '*.txt'));

% Creates empty variable to store the text
corpus = '';

% Loops through each file and links the text together
for i = 1:length(file_list)
    % Reads the file
    file_name = fullfile(directory_name, file_list(i).name);
    text = fileread(file_name);

    % Links the text to the all_text variable and makes it lowercase
    corpus = [corpus, lower(text)];
end

% Removes the punctuation from the corpus
corpus = regexprep (corpus, '[^a-zA-Z\s]', '');
% Tokenize document: This means that the raw data is converted into a form
% that is more easily processed and analysed
doc = tokenizedDocument(corpus);

% Split the corpus into individual words
doc = strsplit(corpus);

% STEP 2: Generate n-grams

%STEP 4: Ask user to type in the start of a sentence
user_input = input('Please enter the beginning of a sentence, please write at least 2 words: ', 's');
user_input = lower(user_input); 
user_input = regexprep (user_input, '[^a-zA-Z\s]', ''); 

top = 10000; 

words = split(user_input); % Split into individual words

n = length(words); % Start with the length of the user input

while n > 1 % Loop through n-grams of decreasing length until a matching n-gram is found
    ngrams = bagOfNgrams(doc,'NgramLengths',n);
    
    % Take last m amount of words
    m = n-1;
    last_m_words = words(end-m+1:end); % Join last m words with a space separator
    
    % Loop through each word in last_m_words and find a matching n-gram
    found_matching_ngram = false;
    for i = 1:length(last_m_words)
        if i == length(last_m_words)
            idx = find(all(topkngrams(ngrams,top).Ngram(:,1:end-1) == last_m_words(2)));
        else
            idx = find(all(topkngrams(ngrams,top).Ngram(:,end-m+i:end) == last_m_words(1:i),2));
        end
        if ~isempty(idx)
            max_matching_ngram = topkngrams(ngrams,top).Ngram(idx(1),:); % Choose the first matching n-gram found
            found_matching_ngram = true;
            break; % Exit loop if a matching n-gram is found
        end
    end
    
    if found_matching_ngram
        break; % Exit loop if a matching n-gram is found
    end
    
    n = n-1; % Decrease n and try again with a shorter n-gram
end

% Display the matching n-gram
if found_matching_ngram
    disp('The most frequent matching n-gram is: ');
    disp(max_matching_ngram);
else
    disp('No matching n-gram found.');
end




